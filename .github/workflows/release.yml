name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x gradlew
      
    - name: Extract version from tag and set build info
      id: get_version
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        APP_VERSION="1.0+${{ github.run_number }}"
        VERSION_CODE=$((1000000 + ${{ github.run_number }}))
        echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT
        echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "Building release: $APP_VERSION (code: $VERSION_CODE) for tag: $TAG_VERSION"
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Build release APK
      run: ./gradlew assembleRelease
      
    - name: Sign APK
      id: sign_apk
      continue-on-error: true
      run: |
        # Decode keystore
        echo "${{ secrets.BASESTORE_BASE64 }}" | base64 -d > release.keystore
        
        # Sign APK using jarsigner (more compatible than apksigner)
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore release.keystore \
          -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          app/build/outputs/apk/release/app-release.apk \
          "${{ secrets.KEY_ALIAS }}"
        
        # Zipalign the signed APK
        $ANDROID_HOME/build-tools/34.0.0/zipalign -v 4 \
          app/build/outputs/apk/release/app-release.apk \
          app-release-signed.apk
        
        # Set output
        echo "signedReleaseFile=$(pwd)/app-release-signed.apk" >> $GITHUB_OUTPUT
        
        # Verify signing worked
        if [ -f "app-release-signed.apk" ]; then
          echo "APK signing successful"
          ls -la app-release-signed.apk
        else
          echo "APK signing failed"
          exit 1
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: MoopMapper ${{ steps.get_version.outputs.TAG_VERSION }}
        body: |
          ## üó∫Ô∏è MoopMapper Release ${{ steps.get_version.outputs.TAG_VERSION }}
          
          ### Version Information
          - **App Version:** ${{ steps.get_version.outputs.APP_VERSION }}
          - **Version Code:** ${{ steps.get_version.outputs.VERSION_CODE }}
          - **Build Number:** ${{ github.run_number }}
          - **Git Tag:** ${{ steps.get_version.outputs.TAG_VERSION }}
          - **Commit:** ${{ github.sha }}
          
          ### Features
          - Smart auto-mapping with motion detection
          - GPS-based photo capture for Burning Man lot mapping
          - Unique device ID generation (3-word format)
          - Photo browser with metadata
          - FastAPI upload service integration
          
          ### Installation
          1. Download the APK file below
          2. Enable "Install from Unknown Sources" in Android settings
          3. Install the APK on your Android device
          4. Grant camera and location permissions when prompted
          
          ### Usage
          1. Launch app to get your unique upload key
          2. Use "Snapshot" to start mapping session
          3. Walk slowly while phone captures photos automatically
          4. Use "Browse Previous Images" to review captured photos
          5. Upload photos via the upload service
          
          ---
          ü§ñ **Automated Release** - Built with GitHub Actions
        draft: false
        prerelease: false
        
    - name: Upload Release APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.sign_apk.outputs.signedReleaseFile }}
        asset_name: MoopMapper-${{ steps.get_version.outputs.APP_VERSION }}.apk
        asset_content_type: application/vnd.android.package-archive